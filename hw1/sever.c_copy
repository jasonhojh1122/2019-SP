#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <sys/select.h>

#define ERR_EXIT(a) { perror(a); exit(1); }

typedef struct {
    char hostname[512];  // server's hostname
    unsigned short port;  // port to listen
    int listen_fd;  // fd to wait for a new connection
} server;

typedef struct {
    char host[512];  // client's host
    int conn_fd;  // fd to talk with client
    char buf[512];  // data sent by/to client
    size_t buf_len;  // bytes used by buf
    // you don't need to change this.
	int item;
    int wait_for_write;  // used by handle_read to know if the header is read or not.
} request;

typedef struct {
    int id;
    int balance;
} account;

typedef enum {
    SAVE,
    WITHDRAW,
    TRANSFER,
    BALANCE,
    ERROR
} WriteType;

server svr;  // server
request* requestP = NULL;  // point to a list of requests
int maxfd;  // size of open file descriptor table, size of request list

const char* daccept_read_header = "ACCEPT_FROM_READ";
const char* accept_write_header = "ACCEPT_FROM_WRITE";

// Forwards

static void init_server(unsigned short port);
// initailize a server, exit for error

static void init_request(request* reqP);
// initailize a request instance

static void free_request(request* reqP);
// free resources used by a request instance

static int handle_read(request* reqP);
// return 0: socket ended, request done.
// return 1: success, message (without header) got this time is in reqP->buf with reqP->buf_len bytes. read more until got <= 0.
// It's guaranteed that the header would be correctly set after the first read.
// error code:
// -1: client connection error

int StrToInt(char *str, int len);
WriteType GetWriteType(char *buf, int *value1, int *value2);
int GetID(request *req);
int HandleWriteRequest(request *req, int accountFd, int *fdWaitForWrite, int *loginAccount);
void HandleReadRequest(request *req, int accountFd);


int main(int argc, char** argv) {
    int i, ret;

    struct sockaddr_in cliaddr;  // used by accept()
    int clilen;

    int conn_fd;  // fd for a new connection with client
    int file_fd;  // fd for file that we open for reading
    char buf[512];
    int buf_len;

    // Parse args.
    if (argc != 2) {
        fprintf(stderr, "usage: %s [port]\n", argv[0]);
        exit(1);
    }

    // Initialize server
    init_server((unsigned short) atoi(argv[1]));

    // Get file descripter table size and initize request table
    maxfd = getdtablesize();
    requestP = (request*) malloc(sizeof(request) * maxfd);
    if (requestP == NULL) {
        ERR_EXIT("out of memory allocating all requests");
    }
    for (i = 0; i < maxfd; i++) {
        init_request(&requestP[i]);
    }
    requestP[svr.listen_fd].conn_fd = svr.listen_fd;
    strcpy(requestP[svr.listen_fd].host, svr.hostname);

    // Loop for handling connections
    fprintf(stderr, "\nstarting on %.80s, port %d, fd %d, maxconn %d...\n", svr.hostname, svr.port, svr.listen_fd, maxfd);

    // Descriptor sets
    fd_set fdset;
    int maxSd;

    // Account informatioin
    account *acc = NULL;
    WriteType userRequest;

    int accountFd;

    #ifdef READ_SERVER
    accountFd = open("account_list", O_RDWR);
    #else
    accountFd = open("account_list", O_RDWR);
    #endif
    if (accountFd == -1)
    fprintf(stderr, "Can't open account_list\n");

    int fdWaitForWrite[maxfd];
    int loginAccount[21];
    for (int i = 0; i < maxfd; i++) fdWaitForWrite[i] = -1;
    for (int i = 0; i < 21; i++) loginAccount[i] = 0;

    while (1) {
        
        FD_ZERO(&fdset);
        FD_SET(svr.listen_fd, &fdset);
        maxSd = svr.listen_fd;

        //add child sockets to set
        for ( i = 0 ; i < maxfd ; i++) {   
            int sd = requestP[i].conn_fd;
            if(sd >= 0)
                FD_SET(sd , &fdset);
            if (sd > maxSd)
                maxSd = sd;
        }

        if ((select(maxSd+1, &fdset, NULL, NULL, NULL) < 0) && (errno!=EINTR))
            ERR_EXIT("select");

        // If socket is active, then there is new connection
        if (FD_ISSET(svr.listen_fd, &fdset)){
            clilen = sizeof(cliaddr);
            conn_fd = accept(svr.listen_fd, (struct sockaddr*)&cliaddr, (socklen_t*)&clilen);
            if (conn_fd < 0) {
                if (errno == EINTR || errno == EAGAIN) continue;  // try again
                if (errno == ENFILE) {
                    (void) fprintf(stderr, "out of file descriptor table ... (maxconn %d)\n", maxfd);
                    continue;
                }
                ERR_EXIT("accept")
            }
            requestP[conn_fd].conn_fd = conn_fd;
            strcpy(requestP[conn_fd].host, inet_ntoa(cliaddr.sin_addr));
            fprintf(stderr, "getting a new request... fd %d from %s\n", conn_fd, requestP[conn_fd].host);
        }

        for (int i = 0; i < maxfd; i++){
            if (requestP[i].conn_fd == -1) continue;
            if (requestP[i].conn_fd == svr.listen_fd) continue;
            if (FD_ISSET(requestP[i].conn_fd, &fdset)){
                ret = handle_read(&requestP[i]); // parse data from client to requestP[conn_fd].buf
                if (ret < 0) {
                    fprintf(stderr, "bad request from %s\n", requestP[conn_fd].host);
                    continue;
                }

                #ifdef READ_SERVER
                HandleReadRequest(&requestP[i], accountFd);
                close(requestP[i].conn_fd);
                free_request(&requestP[i]);

                #else
                int closeWriteConnection;
                closeWriteConnection = HandleWriteRequest(&requestP[i], accountFd, fdWaitForWrite, loginAccount);
                if (closeWriteConnection == 0){
                    close(requestP[i].conn_fd);
                    free_request(&requestP[i]);
                }
                #endif

            }
        }
    }
    free(requestP);
    return 0;
}

int StrToInt(char *str, int len){
    int ret = 0;
    for (int i = 0; i < len; i++){
        if (str[i] > '9' || str[i] < '0'){
            return -1;
            break;
        }
        ret = ret * 10 + str[i] - '0';
    }
    return ret;
}

WriteType GetWriteType(char *buf, int *value1, int *value2){
    char *splitPtr;
    WriteType type;

    splitPtr = strtok (buf, " ");
    if (splitPtr == NULL) return ERROR;

    if (strcmp(splitPtr, "save") == 0) type = SAVE;
    else if (strcmp(splitPtr, "withdraw") == 0) type = WITHDRAW;
    else if (strcmp(splitPtr, "transfer") == 0) type = TRANSFER;
    else if (strcmp(splitPtr, "balance") == 0) type = BALANCE;
    else return ERROR;

    splitPtr = strtok(NULL, " ");
    if (splitPtr == NULL) return ERROR;
    *value1 = StrToInt(splitPtr, strlen(splitPtr));
    if (*value1 == -1) return ERROR;

    splitPtr = strtok(NULL, " ");
    if (splitPtr == NULL && type == TRANSFER) return ERROR;
    else if (splitPtr == NULL && type != TRANSFER) return type;
    else if (splitPtr != NULL && type != TRANSFER) return ERROR;
    *value2 = StrToInt(splitPtr, strlen(splitPtr));
    if (*value2 == -1) return ERROR;

    splitPtr = strtok(NULL, " ");
    if (splitPtr != NULL) return ERROR;
    else return type;
}

int GetID(request *req){
    int id = StrToInt(req->buf, req->buf_len);
    if (id > 20) return -1;
    return id;
}

int HandleWriteRequest(request *req, int accountFd, int *fdWaitForWrite, int *loginAccount){
    char buf[128];
    if (fdWaitForWrite[req->conn_fd] == -1){ // first request, get the id from user
        int id = GetID(req);
        if (id == -1){
            sprintf(buf, "Bad ID request.\n");
            write(req->conn_fd, buf, strlen(buf));
            return 0;
        }
        else if (loginAccount[id] == 1){
            sprintf(buf, "This account is locked.\n");
            write(req->conn_fd, buf, strlen(buf));
            return 0;
        }
        else{
            loginAccount[id] = 1;
            struct flock lock;
            lock.l_type = F_WRLCK;
            lock.l_whence = SEEK_SET;
            lock.l_start = sizeof(account) * (id - 1);
            lock.l_len = sizeof(account);
            
            if (fcntl(accountFd, F_SETLK, &lock) == 0){
                sprintf(buf, "This account is modifiable.\n");
                write(req->conn_fd, buf, strlen(buf));
                fdWaitForWrite[req->conn_fd] = id;
                return 1;
            }
            else {
                sprintf(buf, "This account is locked.\n");
                write(req->conn_fd, buf, strlen(buf));
                return 0;
            }    
        }
    }
    else{ // second request, get the command from user
        int id = fdWaitForWrite[req->conn_fd];
        int value1 = -1, value2 = -1;
        WriteType type;
        account acc;
        pread(accountFd, &acc, sizeof(account), sizeof(account) * (id - 1));

        type = GetWriteType(req->buf, &value1, &value2);
        if (value1 == -1) type = ERROR;

        switch (type){
            case SAVE:
                acc.balance += value1;
                pwrite(accountFd, &acc, sizeof(account), sizeof(account) * (id - 1));
                break;

            case WITHDRAW:
                if (acc.balance < value1){
                    type = ERROR;
                    break;
                }
                acc.balance -= value1;
                pwrite(accountFd, &acc, sizeof(account), sizeof(account) * (id - 1));
                break;

            case TRANSFER:
                if (value2 == -1 || acc.balance < value2 || value1 > 20){
                    type = ERROR;
                    break;
                }
                acc.balance -= value2;
                pwrite(accountFd, &acc, sizeof(account), sizeof(account) * (id - 1));
                
                pread(accountFd, &acc, sizeof(account), sizeof(account) * (value1 - 1));
                acc.balance += value2;
                pwrite(accountFd, &acc, sizeof(account), sizeof(account) * (value1 - 1));
                break;

            case BALANCE:
                acc.balance = value1;
                pwrite(accountFd, &acc, sizeof(account), sizeof(account) * (id - 1));
                break;
        }

        if (type == ERROR){
            sprintf(buf, "Operation failed.\n");
            write(req->conn_fd, buf, strlen(buf));
        }

        struct flock lock;
        lock.l_type = F_UNLCK;
        lock.l_whence = SEEK_SET;
        lock.l_start = sizeof(account) * (id - 1);
        lock.l_len = sizeof(account);

        fcntl(accountFd, F_SETLK, &lock);
        fdWaitForWrite[req->conn_fd] = -1;
        loginAccount[id] = 0;
        return 0;
    }
}

void HandleReadRequest(request *req, int accountFd){
    char buf[512];
    int id = GetID(req);
    if (id == -1){
        sprintf(buf, "Bad ID request\n");
        write(req->conn_fd, buf, strlen(buf));
        return;
    }
    
    account acc;
    struct flock lock;
    lock.l_type = F_WRLCK;
    lock.l_whence = SEEK_SET;
    lock.l_start = sizeof(account) * (id - 1);
    lock.l_len = sizeof(account);
    
    if (fcntl(accountFd, F_SETLK, &lock) == 0){
        pread(accountFd, &acc, sizeof(account), sizeof(account) * (id - 1));
        sprintf(buf, "%d %d\n", acc.id, acc.balance);
        write(req->conn_fd, buf, strlen(buf));
        lock.l_type = F_UNLCK;
        fcntl(accountFd, F_SETLK, &lock);
    }
    else {
        sprintf(buf, "This account is locked.\n");
        write(req->conn_fd, buf, strlen(buf));
    }
    return;
}









// ======================================================================================================
// You don't need to know how the following codes are working
#include <fcntl.h>

static void* e_malloc(size_t size);


static void init_request(request* reqP) {
    reqP->conn_fd = -1;
    reqP->buf_len = 0;
    reqP->item = 0;
    reqP->wait_for_write = 0;
}

static void free_request(request* reqP) {
    /*if (reqP->filename != NULL) {
        free(reqP->filename);
        reqP->filename = NULL;
    }*/
    init_request(reqP);
}

// return 0: socket ended, request done.
// return 1: success, message (without header) got this time is in reqP->buf with reqP->buf_len bytes. read more until got <= 0.
// It's guaranteed that the header would be correctly set after the first read.
// error code:
// -1: client connection error
static int handle_read(request* reqP) {
    int r;
    char buf[512];

    // Read in request from client
    r = read(reqP->conn_fd, buf, sizeof(buf));
    if (r < 0) return -1;
    if (r == 0) return 0;
	char* p1 = strstr(buf, "\015\012");
	int newline_len = 2;
	// be careful that in Windows, line ends with \015\012
	if (p1 == NULL) {
		p1 = strstr(buf, "\012");
		newline_len = 1;
		if (p1 == NULL) {
			ERR_EXIT("this really should not happen...");
		}
	}
	size_t len = p1 - buf + 1;
	memmove(reqP->buf, buf, len);
	reqP->buf[len - 1] = '\0';
	reqP->buf_len = len-1;
    return 1;
}

static void init_server(unsigned short port) {
    struct sockaddr_in servaddr;
    int tmp;

    gethostname(svr.hostname, sizeof(svr.hostname));
    svr.port = port;

    svr.listen_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (svr.listen_fd < 0) ERR_EXIT("socket");

    bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    servaddr.sin_port = htons(port);
    tmp = 1;
    if (setsockopt(svr.listen_fd, SOL_SOCKET, SO_REUSEADDR, (void*)&tmp, sizeof(tmp)) < 0) {
        ERR_EXIT("setsockopt");
    }
    if (bind(svr.listen_fd, (struct sockaddr*)&servaddr, sizeof(servaddr)) < 0) {
        ERR_EXIT("bind");
    }
    if (listen(svr.listen_fd, 1024) < 0) {
        ERR_EXIT("listen");
    }
}

static void* e_malloc(size_t size) {
    void* ptr;

    ptr = malloc(size);
    if (ptr == NULL) ERR_EXIT("out of memory");
    return ptr;
}

